import MySQLdb, smbus, time, os, sys

DEVICE_ADDRESS = 0x0D
DEVICE_REG = 0x1d
transportid = [None] * 2

#Obtem o primeiro registro do banco de dados
def get_db_data():
    global db
    db = MySQLdb.connect("localhost", "root", "root", "transorg")
    global cursor
    cursor = db.cursor() 
    cursor.execute("SELECT * FROM transorg")
    data = cursor.fetchone()
    if not data:
        print ("Empty database. Waiting for data...")
        time.sleep(3)
        db.close()
        return get_db_data()
    else:
        return dat    db = MySQLdb.connect("localhost", "root", "root", "transorg")
    global cursor
    cursor = db.cursor() 
    cursor.execute("SELECT * FROM transorg")
    data = cursor.fetchone()
    if not data:
        print ("Empty database. Waiting for data...")
        time.sleep(3)
        db.close()
        return get_db_data()
    else:
        return data
a

def insert_new_transportid(transport_id):
	

#Post to ARDUINO
def arduino_post():
    data = get_db_data()
    if (transportid[0] == None):
    	transportid[0] = data[5]
    elif (transportid[1] == None):
    	transportid[1] = data[5]
    else:
	transportid[0] = transportid[1]
	transportid[1] = data[5]

    if(transportid[0] == 0 and transportid[1] == 1):
	data[6] = data[6] + 1
	
    payload = "{\"date\":\""+ str(data[0]) +"\", \"latitude\":\""+ str(data[1]) +"\", \"longitude\":\"" + str(data[2]) + "\", \"temperature\":\"" + str(data[3]) + "\", \"is_locked\":" + str(data[4]) + ", \"transport_id\":" + transport_id + ", \"enable\":"+ str(data[5]) +"} "

    
    bus = smbus.SMBus(1)    # 0 = /dev/i2c-0 (port I2C0), 1 = /dev/i2c-1 (port I2C1)


    requisition_data = payload.split(" ",8)


    x = 0
    while (x < 8):
        data = changeToBytes(requisition_data[x])
        bus.write_i2c_block_data(DEVICE_ADDRESS, DEVICE_REG, data)
        time.sleep(1)
        print data
        x = x+1

def changeToBytes(string):
    data_array = []
    for char in string:
        data_array.append(ord(char[0]))
    return data_array

#Delete data
def delete_data():
    data = get_db_data()
    sql = 'DELETE FROM transorg WHERE date = ' + "'" + str(data[0]) + "'"
    try:
        cursor.execute(sql)
        db.commit()
        print("DELETED " + str(data[0]) + " from database")
    except:
        db.rollback()


while True:
    os.system('sudo ./DataBaseTransorg')
    get_db_data()
    arduino_post()
    time.sleep(120)
    delete_data()
    db.close()

